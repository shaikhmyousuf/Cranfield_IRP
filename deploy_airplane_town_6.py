import glob
import os
import sys

import numpy as np

try:
    sys.path.append(glob.glob('/home/mueavi/carla/PythonAPI/carla/dist/carla-*%d.%d-%s.egg' % (
        sys.version_info.major,
        sys.version_info.minor,
        'win-amd64' if os.name == 'nt' else 'linux-x86_64'))[0])
except IndexError:
    pass

import carla

from queue import Queue
from queue import Empty
import math


def sensor_callback(data, queue):
    """
    This simple callback just stores the data on a thread safe Python Queue
    to be retrieved from the "main thread".
    """
    queue.put(data)


def main():
    actor_list = []

    # In this tutorial script, we are going to add a vehicle to the simulation
    # and let it drive in autopilot. We will also create a camera attached to
    # that vehicle, and save all the images generated by the camera to disk.
    airplane = None
    camera = None
    try:
        # First of all, we need to create the client that will send the requests
        # to the simulator. Here we'll assume the simulator is accepting
        # requests in the localhost at port 2000.
        client = carla.Client('localhost', 2000)
        client.set_timeout(2.0)

        # Once we have a client we can retrieve the world that is currently
        # running.
        world = client.get_world()

        original_weather = world.get_weather()
        weather = world.get_weather()
        weather.fog_density = 0 #85 #for 110m
        weather.wetness = 0
        weather.sun_azimuth_angle = 65
        weather.sun_altitude_angle = 15 #15 #-10
        weather.precipitation = 0
        world.set_weather(weather)

        original_settings = world.get_settings()
        dt = 0.05
        settings = world.get_settings()
        settings.fixed_delta_seconds = dt
        settings.synchronous_mode = True
        world.apply_settings(settings)

        # The world contains the list blueprints that we can use for adding new
        # actors into the simulation.
        blueprint_library = world.get_blueprint_library()

        # airplane================================================================================
        bp = blueprint_library.filter('airplane8')[0]

        # # Now we need to give an initial transform to the vehicle. We choose a
        # # random transform from the list of recommended spawn points of the map.
        #TAXIWAY 1 -----------------------------------------------------------
        # start_pos = carla.Location(31.65, 144.1, 4.3)
        # targe_pos = carla.Location(531.65, 144.1, 4.3)
        # targe_pos = carla.Location(31.85, 144.1, 4.3)

        # TAXIWAY 2 -----------------------------------------------------------
        start_pos = carla.Location(31.65, 45.7, 4.3)
        targe_pos = carla.Location(32.65, 45.7, 4.3)
        # # #targe_pos = carla.Location(32.65, 45.7, 4.3)

        # TAXIWAY 3 -----------------------------------------------------------
        #start_pos = carla.Location(31.65, -18.24, 4.3)
        #targe_pos = carla.Location(531.65, -18.24, 4.3)
        #targe_pos = carla.Location(32.65, -18.24, 4.3)

        # TAXIWAY 4 -----------------------------------------------------------
        # start_pos = carla.Location(31.65, -170.5, 4.3)
        # targe_pos = carla.Location(31.70, -170.5, 4.3)
        # targe_pos = carla.Location(32.65, -170.5, 4.3)

        transform = carla.Transform(location=start_pos, rotation=carla.Rotation(0, 270, 0))
        v = 2
        # # So let's tell the world to spawn the vehicle.
        airplane = world.spawn_actor(bp, transform, attach_to=None)

        # camera================================================================================
        # # Let's add now a "depth" camera attached to the vehicle. Note that the
        # # transform we give here is now relative to the vehicle.
        camera_bp = blueprint_library.find('sensor.camera.rgb')
        camera_bp.set_attribute('fov', str(24)) ###########
        # for wing cams ---------------
        camera_wide_bp = blueprint_library.find('sensor.camera.rgb')
        camera_wide_bp.set_attribute('fov', str(65))  ###########
        # camera_transform = carla.Transform(carla.Location(x=0, y=-2.77, z=.86),
        #                                    carla.Rotation(-30, -90, 0))

        # FOR Nose POS with 30deg down angle, 0 azimuth
        camera_transform_nose = carla.Transform(carla.Location(x=0, y=19.70, z=1.65),
                                           carla.Rotation(-10, 90, 0))
        camera_nose = world.spawn_actor(camera_bp, camera_transform_nose, attach_to=airplane)

        # FOR Tail POS with 30deg down angle, 0 azimuth
        camera_transform_tail = carla.Transform(carla.Location(x=0, y=-16.7, z=8.52),
                                           carla.Rotation(-12.0, 90, 0))
        camera_tail = world.spawn_actor(camera_bp, camera_transform_tail, attach_to=airplane)

        # FOR Tail LEFT POS with 45deg down angle, -20 azimuth
        camera_transform_tail_left = carla.Transform(carla.Location(x=0, y=-16.7, z=8.52),
                                                carla.Rotation(-33, 59, -13))
        camera_tail_left = world.spawn_actor(camera_wide_bp, camera_transform_tail_left, attach_to=airplane)

        # FOR Tail RIGHT POS with 45deg down angle, +20 azimuth
        camera_transform_tail_right = carla.Transform(carla.Location(x=0, y=-16.7, z=8.52),
                                                     carla.Rotation(-33, 121, 13))
        camera_tail_right = world.spawn_actor(camera_wide_bp, camera_transform_tail_right, attach_to=airplane)


        # FOR LWT POS with 30deg down angle, 0 degree azimuth
        # camera_transform = carla.Transform(carla.Location(x=-6.6, y=0.8, z=0.55),
        #                                    carla.Rotation(-30, -45, 0))
        # FOR RWT POS with 30deg down angle, 0 deg azimuth
        # camera_transform = carla.Transform(carla.Location(x=6.6, y=0.8, z=0.55),
        #                                    carla.Rotation(-30, -90, 0))

        # =====================================================================================
        # camera = world.spawn_actor(camera_bp, camera_transform, attach_to=airplane)
        #
        # camera_transform1 = carla.Transform(carla.Location(x=5, y=3.0, z=- 2.0),
        #                                     carla.Rotation(0, -90, 0))
        # camera1 = world.spawn_actor(camera_bp, camera_transform1, attach_to=airplane)
        # camera.listen(lambda image: image.save_to_disk('_out/%06d.png' % image.frame))

        # radar================================================================================
        rad_bp = world.get_blueprint_library().find('sensor.other.radar')
        rad_bp.set_attribute('horizontal_fov', str(40))
        rad_bp.set_attribute('vertical_fov', str(30))
        rad_bp.set_attribute('range', str(120))

        rad_bp_wing = world.get_blueprint_library().find('sensor.other.radar')
        rad_bp_wing.set_attribute('horizontal_fov', str(40))
        rad_bp_wing.set_attribute('vertical_fov', str(30))
        rad_bp_wing.set_attribute('range', str(75))


        # radar norm ==========================================================================
        rad_location = carla.Location(x=0, y=19.70, z=1.65)
        rad_rotation = carla.Rotation(-10, 90, 0)
        rad_transform = carla.Transform(rad_location, rad_rotation)
        radar = world.spawn_actor(rad_bp, rad_transform, attach_to=airplane,
                                  attachment_type=carla.AttachmentType.Rigid)
        # radar1 = world.spawn_actor(rad_bp, rad_transform, attach_to=airplane,
        #                            attachment_type=carla.AttachmentType.Rigid)

        # radar NOSE 10deg dn ==========================================================================
        rad_nose_transform = carla.Transform(carla.Location(x=0, y=19.70, z=-1.65),
                                           carla.Rotation(10, 90, 0))
        rad_nose = world.spawn_actor(rad_bp, rad_nose_transform, attach_to=airplane,
                                       attachment_type=carla.AttachmentType.Rigid)
        radar1 = world.spawn_actor(rad_bp, rad_nose_transform, attach_to=airplane,
                                    attachment_type=carla.AttachmentType.Rigid)
        # radar LWT 10 deg dn ==========================================================================
        rad_lwt_transform = carla.Transform(carla.Location(x=16.74, y=-3.39, z=0.0),
                                             carla.Rotation(5, 90, 0)) #90 is str
        # rad_lwt_transform = carla.Transform(carla.Location(x=16.74 + 0.89, y=-3.39 - 2.34, z=0.0 + 2.65),
        #                                     carla.Rotation(0, 90, 0))  # 90 is str
        rad_lwt = world.spawn_actor(rad_bp_wing, rad_lwt_transform, attach_to=airplane,
                                     attachment_type=carla.AttachmentType.Rigid)
        radar2 = world.spawn_actor(rad_bp_wing, rad_lwt_transform, attach_to=airplane,
                                    attachment_type=carla.AttachmentType.Rigid)
        # radar RWT 10 deg dn ==========================================================================
        rad_rwt_transform = carla.Transform(carla.Location(x=-17.04-0.89, y=-3.39-2.34, z=0.0+2.65),
                                            carla.Rotation(-10, 90, 0))
        rad_rwt = world.spawn_actor(rad_bp_wing, rad_rwt_transform, attach_to=airplane,
                                    attachment_type=carla.AttachmentType.Rigid)
        radar3 = world.spawn_actor(rad_bp_wing, rad_rwt_transform, attach_to=airplane,
                                    attachment_type=carla.AttachmentType.Rigid)
        # Callback function ===================================================================
        def rad_callback(radar_data):
            velocity_range = 7.5  # m/s
            current_rot = radar_data.transform.rotation
            for detect in radar_data:
                azi = math.degrees(detect.azimuth)
                alt = math.degrees(detect.altitude)
                # The 0.25 adjusts a bit the distance so the dots can
                # be properly seen
                fw_vec = carla.Vector3D(x=detect.depth - 0.25)
                carla.Transform(
                    carla.Location(),
                    carla.Rotation(
                        pitch=current_rot.pitch + alt,
                        yaw=current_rot.yaw + azi,
                        roll=current_rot.roll)).transform(fw_vec)

                def clamp(min_v, max_v, value):
                    return max(min_v, min(value, max_v))

                norm_velocity = detect.velocity / velocity_range  # range [-1, 1]
                r = int(clamp(0.0, 1.0, 1.0 - norm_velocity) * 255.0)
                g = int(clamp(0.0, 1.0, 1.0 - abs(norm_velocity)) * 255.0)
                b = int(abs(clamp(- 1.0, 0.0, - 1.0 - norm_velocity)) * 255.0)
                world.debug.draw_point(
                    radar_data.transform.location + fw_vec,
                    size=0.075,
                    life_time=0.06,
                    persistent_lines=False,
                    color=carla.Color(r, g, b))

        def rad_callback1(radar_data):
            velocity_range = 7.5  # m/s
            current_rot = radar_data.transform.rotation
            for detect in radar_data:
                azi = math.degrees(detect.azimuth)
                alt = math.degrees(detect.altitude)
                # The 0.25 adjusts a bit the distance so the dots can
                # be properly seen
                fw_vec = carla.Vector3D(x=detect.depth - 0.25)
                carla.Transform(
                    carla.Location(),
                    carla.Rotation(
                        pitch=current_rot.pitch + alt,
                        yaw=current_rot.yaw + azi,
                        roll=current_rot.roll)).transform(fw_vec)

                def clamp(min_v, max_v, value):
                    return max(min_v, min(value, max_v))

                norm_velocity = detect.velocity / velocity_range  # range [-1, 1]
                r = int(0)
                g = int(0)
                b = int(255)
                world.debug.draw_point(
                    radar_data.transform.location + fw_vec,
                    size=0.075,
                    life_time=0.06,
                    persistent_lines=False,
                    color=carla.Color(r, g, b))

        def rad_callback2(radar_data):
            velocity_range = 7.5  # m/s
            current_rot = radar_data.transform.rotation
            for detect in radar_data:
                azi = math.degrees(detect.azimuth)
                alt = math.degrees(detect.altitude)
                # The 0.25 adjusts a bit the distance so the dots can
                # be properly seen
                fw_vec = carla.Vector3D(x=detect.depth - 0.25)
                carla.Transform(
                    carla.Location(),
                    carla.Rotation(
                        pitch=current_rot.pitch + alt,
                        yaw=current_rot.yaw + azi,
                        roll=current_rot.roll)).transform(fw_vec)

                def clamp(min_v, max_v, value):
                    return max(min_v, min(value, max_v))

                norm_velocity = detect.velocity / velocity_range  # range [-1, 1]
                r = int(255)
                g = int(0)
                b = int(0)
                world.debug.draw_point(
                    radar_data.transform.location + fw_vec,
                    size=0.075,
                    life_time=0.06,
                    persistent_lines=False,
                    color=carla.Color(r, g, b))

        def rad_callback3(radar_data):
            velocity_range = 7.5  # m/s
            current_rot = radar_data.transform.rotation
            for detect in radar_data:
                azi = math.degrees(detect.azimuth)
                alt = math.degrees(detect.altitude)
                # The 0.25 adjusts a bit the distance so the dots can
                # be properly seen
                fw_vec = carla.Vector3D(x=detect.depth - 0.25)
                carla.Transform(
                    carla.Location(),
                    carla.Rotation(
                        pitch=current_rot.pitch + alt,
                        yaw=current_rot.yaw + azi,
                        roll=current_rot.roll)).transform(fw_vec)

                def clamp(min_v, max_v, value):
                    return max(min_v, min(value, max_v))

                norm_velocity = detect.velocity / velocity_range  # range [-1, 1]
                r = int(0)
                g = int(255)
                b = int(0)
                world.debug.draw_point(
                    radar_data.transform.location + fw_vec,
                    size=0.075,
                    life_time=0.06,
                    persistent_lines=False,
                    color=carla.Color(r, g, b))

        # just for radar points visualzation; comment this line when saving data
        radar1.listen(lambda radar_data: rad_callback1(radar_data)) #NOSE
        radar2.listen(lambda radar_data: rad_callback2(radar_data)) #LWT
        radar3.listen(lambda radar_data: rad_callback3(radar_data)) #RWT

        # The sensor data will be saved in thread-safe Queues ========================================
        # image_queue = Queue()
        # image_queue1 = Queue()
        image_queue_nose = Queue()
        image_queue_tail = Queue()
        image_queue_tail_left = Queue()
        image_queue_tail_right = Queue()
        radar_queue = Queue()
        rad_nose_queue = Queue()
        rad_lwt_queue = Queue()
        rad_rwt_queue = Queue()

        # call data ==================================================================================
        # camera.listen(lambda data: sensor_callback(data, image_queue))
        # camera1.listen(lambda data: sensor_callback(data, image_queue1))
        camera_nose.listen(lambda data: sensor_callback(data, image_queue_nose))
        camera_tail.listen(lambda data: sensor_callback(data, image_queue_tail))
        camera_tail_left.listen(lambda data: sensor_callback(data,image_queue_tail_left))
        camera_tail_right.listen(lambda data: sensor_callback(data, image_queue_tail_right))
        radar.listen(lambda data: sensor_callback(data, radar_queue))
        rad_nose.listen(lambda data: sensor_callback(data, rad_nose_queue))
        rad_lwt.listen(lambda data: sensor_callback(data, rad_lwt_queue))
        rad_rwt.listen(lambda data: sensor_callback(data, rad_rwt_queue))
        # ================================================================================

        while True:
            world.tick()

            world_frame = world.get_snapshot().frame
            try:
                # Get the data once it's received.
                # image_data = image_queue.get(True, 1.0)
                # image_data1 = image_queue1.get(True, 1.0)
                image_data_nose = image_queue_nose.get(True, 1.0)
                image_data_tail = image_queue_tail.get(True, 1.0)
                image_data_tail_left = image_queue_tail_left.get(True, 1.0)
                image_data_tail_right = image_queue_tail_right.get(True, 1.0)
                radar_data = radar_queue.get(True, 1.0)
                rad_nose_data = rad_nose_queue.get(True, 1.0)
                rad_lwt_data = rad_lwt_queue.get(True, 1.0)
                rad_rwt_data = rad_rwt_queue.get(True, 1.0)
            except Empty:
                print("[Warning] Some sensor data has been missed")
                continue

            #assert image_data.frame == radar_data.frame == world_frame

            # save image data =================================================================================
            # image_data.save_to_disk('_out_cam/%06d.png' % image_data.frame)
            # image_data1.save_to_disk('_out_cam1/%06d.png' % image_data1.frame)
            image_data_nose.save_to_disk('_out_cam_nose/%06d.png' % image_data_nose.frame)
            image_data_tail.save_to_disk('_out_cam_tail/%06d.png' % image_data_tail.frame)
            image_data_tail_left.save_to_disk('_out_cam_tail_left/%06d.png' % image_data_tail_left.frame)
            image_data_tail_right.save_to_disk('_out_cam_tail_right/%06d.png' % image_data_tail_right.frame)

            # save radar data ==================================================================================
            points = np.frombuffer(radar_data.raw_data, dtype=np.dtype('f4'))
            points = np.reshape(points, (len(radar_data), 4))
            np.savetxt('_out_radar/%06d.txt' % radar_data.frame, points)

            points_nose = np.frombuffer(rad_nose_data.raw_data, dtype=np.dtype('f4'))
            points_nose = np.reshape(points_nose, (len(rad_nose_data), 4))
            np.savetxt('_out_rad_nose/%06d.txt' % radar_data.frame, points_nose)

            points_lwt = np.frombuffer(rad_lwt_data.raw_data, dtype=np.dtype('f4'))
            points_lwt = np.reshape(points_lwt, (len(rad_lwt_data), 4))
            np.savetxt('_out_rad_lwt/%06d.txt' % radar_data.frame, points_lwt)

            points_rwt = np.frombuffer(rad_rwt_data.raw_data, dtype=np.dtype('f4'))
            points_rwt = np.reshape(points_rwt, (len(rad_rwt_data), 4))
            np.savetxt('_out_rad_rwt/%06d.txt' % radar_data.frame, points_rwt)

            # update position ================================================================================
            pos = airplane.get_location()
            x, y, z = pos.x, pos.y, pos.z
            print(f'current pos: {x, y, z}')
            if x > targe_pos.x:
                v = 0
                break

            delta_dist = dt * v
            x += delta_dist

            airplane.set_location(carla.Location(x, y, z))

    except:
        print('destroying actors')
        # if camera:
        #     camera.destroy()
        # if camera1:
        #     camera1.destroy()
        if camera_nose:
            camera_nose.destroy()
        if camera_tail:
            camera_tail.destroy()
        if camera_tail_left:
            camera_tail_left.destroy()
        if camera_tail_right:
            camera_tail_right.destroy()
        if radar:
            radar.destroy()
        if radar1:
            radar1.destroy()
        if radar2:
            radar2.destroy()
        if radar3:
            radar3.destroy()
        if rad_nose:
            rad_nose.destroy()
        if rad_lwt:
            rad_lwt.destroy()
        if rad_rwt:
            rad_rwt.destroy()
        if airplane:
            airplane.destroy()
        world.apply_settings(original_settings)
        world.set_weather(original_weather)
        print('done.')

    finally:

        print('destroying actors')
        # if camera:
        #     camera.destroy()
        # if camera1:
        #     camera1.destroy()
        if camera_nose:
            camera_nose.destroy()
        if camera_tail:
            camera_tail.destroy()
        if camera_tail_left:
            camera_tail_left.destroy()
        if camera_tail_right:
            camera_tail_right.destroy()
        if radar:
            radar.destroy()
        if radar1:
            radar1.destroy()
        if radar2:
            radar2.destroy()
        if radar3:
            radar3.destroy()
        if rad_nose:
            rad_nose.destroy()
        if rad_lwt:
            rad_lwt.destroy()
        if rad_rwt:
            rad_rwt.destroy()
        if airplane:
            airplane.destroy()
        world.apply_settings(original_settings)
        world.set_weather(original_weather)
        print('done.')


if __name__ == '__main__':
    main()
